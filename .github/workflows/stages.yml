name: stages

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  
  #Generate a random number used in the naming of the docker image
  RAND_NUM: "${{ github.run_id }}-${{ github.run_attempt }}"

jobs:

  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # try 3 versions

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name : Install Dependencies
      run: npm install

    - name: Build
      run: npm run build --if-present -- --prod
      
  unit-testing:
    needs: build
    
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name : Install Dependencies
      run: npm install


    - name: Test
      run: npm run test-headless

           
      

  
  lint:
    needs: build
    
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name : Install Dependencies
      run: npm install

    - name: Lint
      run: npm run lint

  store-product-artifacts:

    needs: build

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # try 3 versions

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name : Install Dependencies
      run: npm install

    - name: Build
      run: npm run build --if-present -- --prod
      
    #Upload artifacts:
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: my-artifact
        path: dist/
        if-no-files-found: error
        retention-days: 90
  
  containerize: 
    
    needs: build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      name: Check out code

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
   
      
   #Building the docker image and pushing it to DockerHub 
    
          
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: khalednagah/khaleddockerrepo:${{ env.RAND_NUM}}
       
  Publish: 
    
    needs: containerize

    runs-on: ubuntu-latest

    steps:
    #Enter the host VM and run the new docker image
    - name: executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST_IP }}
        username: ${{ secrets.HOST_USERNAME }}
        key: ${{ secrets.HOST_PRIVATE_KEY }}
        port: ${{ secrets.HOST_PORT }}
        script: | 
          #current_containers=($(docker ps -q))
          #docker kill ${current_containers[0]}
          docker kill $(docker ps -q)
          docker run -d -p 4200:4200 khalednagah/khaleddockerrepo:${{ env.RAND_NUM}}
          #docker kill ${current_containers[1]}
          docker run -d -p 8080:4200 khalednagah/khaleddockerrepo:${{ env.RAND_NUM}}
          
